#
# Copyright Â© 2016-2023 The Thingsboard Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

server:
  shutdown: "${SERVER_SHUTDOWN:graceful}" # graceful or immediate
  # Server bind address (has no effect if web-environment is disabled).
  address: "${HTTP_BIND_ADDRESS:0.0.0.0}"
  # Server bind port (has no effect if web-environment is disabled).
  port: "${HTTP_BIND_PORT:8083}"
  log_controller_error_stack_trace: "${HTTP_LOG_CONTROLLER_ERROR_STACK_TRACE:false}"
  # Server SSL configuration
  ssl:
    # Enable/disable SSL support
    enabled: "${SSL_ENABLED:false}"
    # Server SSL credentials
    credentials:
      # Server credentials type (PEM - pem certificate file; KEYSTORE - java keystore)
      type: "${SSL_CREDENTIALS_TYPE:PEM}"
      # PEM server credentials
      pem:
        # Path to the server certificate file (holds server certificate or certificate chain, may include server private key)
        cert_file: "${SSL_PEM_CERT:server.pem}"
        # Path to the server certificate private key file. Optional by default. Required if the private key is not present in server certificate file;
        key_file: "${SSL_PEM_KEY:server_key.pem}"
        # Server certificate private key password (optional)
        key_password: "${SSL_PEM_KEY_PASSWORD:server_key_password}"
      # Keystore server credentials
      keystore:
        # Type of the key store (JKS or PKCS12)
        type: "${SSL_KEY_STORE_TYPE:PKCS12}"
        # Path to the key store that holds the SSL certificate
        store_file: "${SSL_KEY_STORE:classpath:keystore/keystore.p12}"
        # Password used to access the key store
        store_password: "${SSL_KEY_STORE_PASSWORD:thingsboard_mqtt_broker}"
        # Key alias
        key_alias: "${SSL_KEY_ALIAS:tomcat}"
        # Password used to access the key
        key_password: "${SSL_KEY_PASSWORD:thingsboard_mqtt_broker}"

listener:
  # MQTT server parameters
  tcp:
    enabled: "${LISTENER_TCP_ENABLED:true}"
    bind_address: "${LISTENER_TCP_BIND_ADDRESS:0.0.0.0}"
    bind_port: "${LISTENER_TCP_BIND_PORT:1883}"
    netty:
      leak_detector_level: "${TCP_NETTY_LEAK_DETECTOR_LVL:DISABLED}" # DISABLED, SIMPLE, ADVANCED, PARANOID
      boss_group_thread_count: "${TCP_NETTY_BOSS_GROUP_THREADS:1}"
      worker_group_thread_count: "${TCP_NETTY_WORKER_GROUP_THREADS:12}"
      max_payload_size: "${TCP_NETTY_MAX_PAYLOAD_SIZE:65536}"
      so_keep_alive: "${TCP_NETTY_SO_KEEPALIVE:true}"
      shutdown_quiet_period: "${TCP_NETTY_SHUTDOWN_QUIET_PERIOD:0}" # in seconds
      shutdown_timeout: "${TCP_NETTY_SHUTDOWN_TIMEOUT:5}" # in seconds
  ssl:
    enabled: "${LISTENER_SSL_ENABLED:false}"
    bind_address: "${LISTENER_SSL_BIND_ADDRESS:0.0.0.0}"
    bind_port: "${LISTENER_SSL_BIND_PORT:8883}"
    config:
      # SSL protocol: See http://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html#SSLContext
      protocol: "${LISTENER_SSL_PROTOCOL:TLSv1.2}"
      # Server SSL credentials
      credentials:
        # Server credentials type (PEM - pem certificate file; KEYSTORE - java keystore)
        type: "${LISTENER_SSL_CREDENTIALS_TYPE:PEM}"
        # PEM server credentials
        pem:
          # Path to the server certificate file (holds server certificate or certificate chain, may include server private key)
          cert_file: "${LISTENER_SSL_PEM_CERT:mqttserver.pem}"
          # Path to the server certificate private key file. Optional by default. Required if the private key is not present in server certificate file;
          key_file: "${LISTENER_SSL_PEM_KEY:mqttserver_key.pem}"
          # Server certificate private key password (optional)
          key_password: "${LISTENER_SSL_PEM_KEY_PASSWORD:server_key_password}"
        # Keystore server credentials
        keystore:
          # Type of the key store (JKS or PKCS12)
          type: "${LISTENER_SSL_KEY_STORE_TYPE:JKS}"
          # Path to the key store that holds the SSL certificate
          store_file: "${LISTENER_SSL_KEY_STORE:mqttserver.jks}"
          # Password used to access the key store
          store_password: "${LISTENER_SSL_KEY_STORE_PASSWORD:server_ks_password}"
          # Optional alias of the private key; If not set, the platform will load the first private key from the keystore;
          key_alias: "${LISTENER_SSL_KEY_ALIAS:}"
          # Optional password to access the private key. If not set, the platform will attempt to load the private keys that are not protected with the password;
          key_password: "${LISTENER_SSL_KEY_PASSWORD:server_key_password}"
      # Skip certificate validity check for client certificates.
      skip_validity_check_for_client_cert: "${LISTENER_SSL_SKIP_VALIDITY_CHECK_FOR_CLIENT_CERT:false}"
    netty:
      leak_detector_level: "${SSL_NETTY_LEAK_DETECTOR_LVL:DISABLED}" # DISABLED, SIMPLE, ADVANCED, PARANOID
      boss_group_thread_count: "${SSL_NETTY_BOSS_GROUP_THREADS:1}"
      worker_group_thread_count: "${SSL_NETTY_WORKER_GROUP_THREADS:12}"
      max_payload_size: "${SSL_NETTY_MAX_PAYLOAD_SIZE:65536}"
      so_keep_alive: "${SSL_NETTY_SO_KEEPALIVE:true}"
      shutdown_quiet_period: "${SSL_NETTY_SHUTDOWN_QUIET_PERIOD:0}" # in seconds
      shutdown_timeout: "${SSL_NETTY_SHUTDOWN_TIMEOUT:5}" # in seconds

queue:
  msg-all:
    # Number of parallel consumers for 'msg-all' topic. Should not be more than the number of partitions in topic.
    consumers-count: "${TB_MSG_ALL_CONSUMERS_COUNT:2}"
    threads-count: "${TB_MSG_ALL_THREADS_COUNT:2}"
    poll-interval: "${TB_MSG_ALL_POLL_INTERVAL:100}"
    pack-processing-timeout: "${TB_MSG_ALL_PACK_PROCESSING_TIMEOUT:10000}"
    ack-strategy:
      type: "${TB_MSG_ALL_ACK_STRATEGY_TYPE:SKIP_ALL}" # SKIP_ALL, RETRY_ALL
      # For RETRY_ALL only
      retries: "${TB_MSG_ALL_ACK_STRATEGY_RETRIES:1}" # Number of retries, 0 is unlimited
    # enable/disable processing of consumed messages in parallel (grouped by publishing client id to preserve order).
    # Helpful when the same client publishes lots of messages in a short amount of time.
    # It is recommended to count the impact of this parameter before setting it on production.
    msg-parallel-processing: "${TB_MSG_ALL_PARALLEL_PROCESSING:false}"
  application-persisted-msg:
    threads-count: "${TB_APP_PERSISTED_MSG_THREADS_COUNT:2}"
    poll-interval: "${TB_APP_PERSISTED_MSG_POLL_INTERVAL:100}"
    pack-processing-timeout: "${TB_APP_PERSISTED_MSG_PACK_PROCESSING_TIMEOUT:2000}"
    ack-strategy:
      type: "${TB_APP_PERSISTED_MSG_ACK_STRATEGY_TYPE:SKIP_ALL}" # SKIP_ALL, RETRY_ALL
      # For RETRY_ALL only
      retries: "${TB_APP_PERSISTED_MSG_ACK_STRATEGY_RETRIES:1}" # Number of retries, 0 is unlimited
    # enable/disable check that application client id contains only alphanumeric chars for Kafka topic creation
    client-id-validation: "${TB_APP_PERSISTED_MSG_CLIENT_ID_VALIDATION:true}"
    # enable/disable check that application shared subscription topic filter contains only alphanumeric chars or '+' or '#' for Kafka topic creation
    shared-topic-validation: "${TB_APP_PERSISTED_MSG_SHARED_TOPIC_VALIDATION:true}"
  device-persisted-msg:
    # Number of parallel consumers for 'device-persisted-msg' topic. Should not be more than the number of partitions in topic.
    consumers-count: "${TB_DEVICE_PERSISTED_MSG_CONSUMERS_COUNT:2}"
    threads-count: "${TB_DEVICE_PERSISTED_MSG_THREADS_COUNT:2}"
    poll-interval: "${TB_DEVICE_PERSISTED_MSG_POLL_INTERVAL:100}"
    ack-strategy:
      type: "${TB_DEVICE_PERSISTED_MSG_ACK_STRATEGY_TYPE:RETRY_ALL}" # SKIP_ALL, RETRY_ALL
      # For RETRY_ALL only
      retries: "${TB_DEVICE_PERSISTED_MSG_ACK_STRATEGY_RETRIES:3}" # Number of retries, 0 is unlimited
      pause-between-retries: "${TB_DEVICE_PERSISTED_MSG_ACK_STRATEGY_PAUSE_BETWEEN_RETRIES:3}" # Time in seconds to wait in consumer thread before retries
  retained-msg:
    poll-interval: "${TB_RETAINED_MSG_POLL_INTERVAL:100}"
    acknowledge-wait-timeout-ms: "${TB_RETAINED_MSG_ACK_WAIT_TIMEOUT_MS:500}"
  client-session:
    poll-interval: "${TB_CLIENT_SESSION_POLL_INTERVAL:100}"
    acknowledge-wait-timeout-ms: "${TB_CLIENT_SESSION_ACK_WAIT_TIMEOUT_MS:500}"
  client-subscriptions:
    poll-interval: "${TB_CLIENT_SUBSCRIPTIONS_POLL_INTERVAL:100}"
    acknowledge-wait-timeout-ms: "${TB_CLIENT_SUBSCRIPTIONS_ACK_WAIT_TIMEOUT_MS:500}"
  client-session-event:
    consumers-count: "${TB_CLIENT_SESSION_EVENT_CONSUMERS_COUNT:2}"
    max-pending-requests: "${TB_CLIENT_SESSION_EVENT_MAX_PENDING_REQUESTS:10000}"
    poll-interval: "${TB_CLIENT_SESSION_EVENT_POLL_INTERVAL:100}"
    batch-wait-timeout-ms: "${TB_CLIENT_SESSION_EVENT_BATCH_WAIT_MS:2000}"
  client-session-event-response:
    response-sender-threads: "${TB_CLIENT_SESSION_EVENT_RESPONSE_SENDER_THREADS:8}"
    poll-interval: "${TB_CLIENT_SESSION_EVENT_RESPONSE_POLL_INTERVAL:100}"
    max-request-timeout: "${TB_CLIENT_SESSION_EVENT_RESPONSE_MAX_REQUEST_TIMEOUT:100000}"
    cleanup-interval: "${TB_CLIENT_SESSION_EVENT_RESPONSE_CLEANUP_INTERVAL:100}"
  disconnect-client-command:
    poll-interval: "${TB_DISCONNECT_CLIENT_COMMAND_POLL_INTERVAL:100}"
  persisted-downlink-msg:
    consumers-count: "${TB_PERSISTED_DOWNLINK_MSG_CONSUMERS_COUNT:1}"
    threads-count: "${TB_PERSISTED_DOWNLINK_MSG_THREADS_COUNT:1}"
    poll-interval: "${TB_PERSISTED_DOWNLINK_MSG_POLL_INTERVAL:100}"
  basic-downlink-msg:
    consumers-count: "${TB_BASIC_DOWNLINK_MSG_CONSUMERS_COUNT:1}"
    threads-count: "${TB_BASIC_DOWNLINK_MSG_THREADS_COUNT:1}"
    poll-interval: "${TB_BASIC_DOWNLINK_MSG_POLL_INTERVAL:100}"
  application-removed-event:
    poll-interval: "${TB_APPLICATION_REMOVED_EVENT_POLL_INTERVAL:100}"
    processing:
      cron: "${TB_APPLICATION_REMOVED_EVENT_PROCESSING_CRON:0 0 3 * * *}"
      zone: "${TB_APPLICATION_REMOVED_EVENT_PROCESSING_ZONE:UTC}"
  historical-data-total:
    poll-interval: "${TB_HISTORICAL_DATA_TOTAL_POLL_INTERVAL:100}"

  kafka:
    bootstrap.servers: "${TB_KAFKA_SERVERS:localhost:9092}"
    enable-topic-deletion: "${TB_KAFKA_ENABLE_TOPIC_DELETION:true}"
    default:
      consumer:
        partition-assignment-strategy: "${TB_KAFKA_DEFAULT_CONSUMER_PARTITION_ASSIGNMENT_STRATEGY:org.apache.kafka.clients.consumer.StickyAssignor}"
        session-timeout-ms: "${TB_KAFKA_DEFAULT_CONSUMER_SESSION_TIMEOUT_MS:300000}"
        max-poll-interval-ms: "${TB_KAFKA_DEFAULT_CONSUMER_MAX_POLL_INTERVAL_MS:300000}"
        max-poll-records: "${TB_KAFKA_DEFAULT_CONSUMER_MAX_POLL_RECORDS:8192}"
        max-partition-fetch-bytes: "${TB_KAFKA_DEFAULT_CONSUMER_MAX_PARTITION_FETCH_BYTES:16777216}"
        fetch-max-bytes: "${TB_KAFKA_DEFAULT_CONSUMER_FETCH_MAX_BYTES:134217728}"
      producer:
        acks: "${TB_KAFKA_DEFAULT_PRODUCER_ACKS:1}"
        retries: "${TB_KAFKA_DEFAULT_PRODUCER_RETRIES:1}"
        batch-size: "${TB_KAFKA_DEFAULT_PRODUCER_BATCH_SIZE:16384}"
        linger-ms: "${TB_KAFKA_DEFAULT_PRODUCER_LINGER_MS:5}"
        buffer-memory: "${TB_KAFKA_DEFAULT_PRODUCER_BUFFER_MEMORY:33554432}"
        compression-type: "${TB_KAFKA_DEFAULT_COMPRESSION_TYPE:none}" # none, gzip, snappy, lz4, zstd
    admin:
      config: "${TB_KAFKA_ADMIN_CONFIG:retries:1}"
    consumer-stats:
      enabled: "${TB_KAFKA_CONSUMER_STATS_ENABLED:true}"
      print-interval-ms: "${TB_KAFKA_CONSUMER_STATS_PRINT_INTERVAL_MS:60000}"
      kafka-response-timeout-ms: "${TB_KAFKA_CONSUMER_STATS_RESPONSE_TIMEOUT_MS:1000}"
      consumer-config: "${TB_KAFKA_CONSUMER_STATS_CONSUMER_CONFIG:}"
    home-page:
      consumer-config: "${TB_KAFKA_HOME_PAGE_CONSUMER_CONFIG:}"
      kafka-response-timeout-ms: "${TB_KAFKA_HOME_PAGE_RESPONSE_TIMEOUT_MS:1000}"
    msg-all:
      topic: "${TB_KAFKA_MSG_ALL_TOPIC:tbmq.msg.all}"
      topic-properties: "${TB_KAFKA_MSG_ALL_TOPIC_PROPERTIES:retention.ms:604800000;segment.bytes:26214400;retention.bytes:2147483648;partitions:24;replication.factor:1}"
      additional-consumer-config: "${TB_KAFKA_MSG_ALL_ADDITIONAL_CONSUMER_CONFIG:}"
      additional-producer-config: "${TB_KAFKA_MSG_ALL_ADDITIONAL_PRODUCER_CONFIG:}"
    application-persisted-msg:
      # Configure retention policy according to the persistence requirements for APPLICATION clients
      topic-properties: "${TB_KAFKA_APP_PERSISTED_MSG_TOPIC_PROPERTIES:retention.ms:604800000;segment.bytes:26214400;retention.bytes:1048576000;replication.factor:1}"
      additional-consumer-config: "${TB_KAFKA_APP_PERSISTED_MSG_ADDITIONAL_CONSUMER_CONFIG:max.poll.records:512}"
      additional-producer-config: "${TB_KAFKA_APP_PERSISTED_MSG_ADDITIONAL_PRODUCER_CONFIG:}"
      shared-topic:
        topic-properties: "${TB_KAFKA_APP_PERSISTED_MSG_SHARED_TOPIC_PROPERTIES:retention.ms:604800000;segment.bytes:26214400;retention.bytes:1048576000;replication.factor:1}"
        additional-consumer-config: "${TB_KAFKA_APP_PERSISTED_MSG_SHARED_ADDITIONAL_CONSUMER_CONFIG:max.poll.records:512}"
    device-persisted-msg:
      topic: "${TB_KAFKA_DEVICE_PERSISTED_MSG_TOPIC:tbmq.msg.persisted}"
      topic-properties: "${TB_KAFKA_DEVICE_PERSISTED_MSG_TOPIC_PROPERTIES:retention.ms:604800000;segment.bytes:26214400;retention.bytes:1048576000;partitions:12;replication.factor:1}"
      additional-consumer-config: "${TB_KAFKA_DEVICE_PERSISTED_MSG_ADDITIONAL_CONSUMER_CONFIG:}"
      additional-producer-config: "${TB_KAFKA_DEVICE_PERSISTED_MSG_ADDITIONAL_PRODUCER_CONFIG:}"
    retained-msg:
      topic: "${TB_KAFKA_RETAINED_MSG_TOPIC:tbmq.msg.retained}"
      topic-properties: "${TB_KAFKA_RETAINED_MSG_TOPIC_PROPERTIES:segment.bytes:26214400;partitions:1;replication.factor:1}"
      additional-consumer-config: "${TB_KAFKA_RETAINED_MSG_ADDITIONAL_CONSUMER_CONFIG:}"
      additional-producer-config: "${TB_KAFKA_RETAINED_MSG_ADDITIONAL_PRODUCER_CONFIG:retries:3}"
    client-session:
      topic: "${TB_KAFKA_CLIENT_SESSION_TOPIC:tbmq.client.session}"
      topic-properties: "${TB_KAFKA_CLIENT_SESSION_TOPIC_PROPERTIES:segment.bytes:26214400;partitions:1;replication.factor:1}"
      additional-consumer-config: "${TB_KAFKA_CLIENT_SESSION_ADDITIONAL_CONSUMER_CONFIG:}"
      additional-producer-config: "${TB_KAFKA_CLIENT_SESSION_ADDITIONAL_PRODUCER_CONFIG:retries:3}"
    client-subscriptions:
      topic: "${TB_KAFKA_CLIENT_SUBSCRIPTIONS_TOPIC:tbmq.client.subscriptions}"
      topic-properties: "${TB_KAFKA_CLIENT_SUBSCRIPTIONS_TOPIC_PROPERTIES:segment.bytes:26214400;partitions:1;replication.factor:1}"
      additional-consumer-config: "${TB_KAFKA_CLIENT_SUBSCRIPTIONS_ADDITIONAL_CONSUMER_CONFIG:}"
      additional-producer-config: "${TB_KAFKA_CLIENT_SUBSCRIPTIONS_ADDITIONAL_PRODUCER_CONFIG:retries:3}"
    client-session-event:
      topic: "${TB_KAFKA_CLIENT_SESSION_EVENT_TOPIC:tbmq.client.session.event.request}"
      topic-properties: "${TB_KAFKA_CLIENT_SESSION_EVENT_TOPIC_PROPERTIES:retention.ms:604800000;segment.bytes:26214400;retention.bytes:1048576000;partitions:48;replication.factor:1}"
      additional-consumer-config: "${TB_KAFKA_CLIENT_SESSION_EVENT_ADDITIONAL_CONSUMER_CONFIG:max.poll.records:1024}"
      additional-producer-config: "${TB_KAFKA_CLIENT_SESSION_EVENT_ADDITIONAL_PRODUCER_CONFIG:}"
    client-session-event-response:
      topic-prefix: "${TB_KAFKA_CLIENT_SESSION_EVENT_RESPONSE_TOPIC_PREFIX:tbmq.client.session.event.response}"
      topic-properties: "${TB_KAFKA_CLIENT_SESSION_EVENT_RESPONSE_TOPIC_PROPERTIES:retention.ms:604800000;segment.bytes:26214400;retention.bytes:1048576000;partitions:1;replication.factor:1}"
      additional-consumer-config: "${TB_KAFKA_CLIENT_SESSION_EVENT_RESPONSE_ADDITIONAL_CONSUMER_CONFIG:}"
      additional-producer-config: "${TB_KAFKA_CLIENT_SESSION_EVENT_RESPONSE_ADDITIONAL_PRODUCER_CONFIG:}"
    disconnect-client-command:
      topic-prefix: "${TB_KAFKA_DISCONNECT_CLIENT_COMMAND_TOPIC_PREFIX:tbmq.client.disconnect}"
      topic-properties: "${TB_KAFKA_DISCONNECT_CLIENT_COMMAND_RESPONSE_TOPIC_PROPERTIES:retention.ms:604800000;segment.bytes:26214400;retention.bytes:1048576000;partitions:1;replication.factor:1}"
      additional-consumer-config: "${TB_KAFKA_DISCONNECT_CLIENT_COMMAND_ADDITIONAL_CONSUMER_CONFIG:}"
      additional-producer-config: "${TB_KAFKA_DISCONNECT_CLIENT_COMMAND_ADDITIONAL_PRODUCER_CONFIG:}"
    basic-downlink-msg:
      topic-prefix: "${TB_KAFKA_BASIC_DOWNLINK_MSG_TOPIC_PREFIX:tbmq.msg.downlink.basic}"
      topic-properties: "${TB_KAFKA_BASIC_DOWNLINK_MSG_TOPIC_PROPERTIES:retention.ms:604800000;segment.bytes:26214400;retention.bytes:1048576000;partitions:12;replication.factor:1}"
      additional-consumer-config: "${TB_KAFKA_BASIC_DOWNLINK_MSG_ADDITIONAL_CONSUMER_CONFIG:}"
      additional-producer-config: "${TB_KAFKA_BASIC_DOWNLINK_MSG_ADDITIONAL_PRODUCER_CONFIG:batch.size:32768}"
    persisted-downlink-msg:
      topic-prefix: "${TB_KAFKA_PERSISTED_DOWNLINK_MSG_TOPIC_PREFIX:tbmq.msg.downlink.persisted}"
      topic-properties: "${TB_KAFKA_PERSISTED_DOWNLINK_MSG_TOPIC_PROPERTIES:retention.ms:604800000;segment.bytes:26214400;retention.bytes:1048576000;partitions:12;replication.factor:1}"
      additional-consumer-config: "${TB_KAFKA_PERSISTED_DOWNLINK_MSG_ADDITIONAL_CONSUMER_CONFIG:}"
      additional-producer-config: "${TB_KAFKA_PERSISTED_DOWNLINK_MSG_ADDITIONAL_PRODUCER_CONFIG:}"
    application-removed-event:
      topic: "${TB_KAFKA_APPLICATION_REMOVED_EVENT_TOPIC:tbmq.sys.app.removed}"
      topic-properties: "${TB_KAFKA_APPLICATION_REMOVED_EVENT_TOPIC_PROPERTIES:retention.ms:604800000;segment.bytes:26214400;retention.bytes:1048576000;partitions:1;replication.factor:1}"
      additional-consumer-config: "${TB_KAFKA_APPLICATION_REMOVED_EVENT_ADDITIONAL_CONSUMER_CONFIG:}"
      additional-producer-config: "${TB_KAFKA_APPLICATION_REMOVED_EVENT_ADDITIONAL_PRODUCER_CONFIG:}"
    historical-data-total:
      topic: "${TB_KAFKA_HISTORICAL_DATA_TOTAL_TOPIC:tbmq.sys.historical.data}"
      topic-properties: "${TB_KAFKA_HISTORICAL_DATA_TOTAL_TOPIC_PROPERTIES:retention.ms:604800000;segment.bytes:26214400;retention.bytes:1048576000;partitions:1;replication.factor:1}"
      additional-consumer-config: "${TB_KAFKA_HISTORICAL_DATA_TOTAL_ADDITIONAL_CONSUMER_CONFIG:}"
      additional-producer-config: "${TB_KAFKA_HISTORICAL_DATA_TOTAL_ADDITIONAL_PRODUCER_CONFIG:}"
    # Custom consumer configuration per Kafka topic
    consumer-properties-per-topic:
#      tbmq.msg.all:
#        - key: max.poll.records
#          value: "${TB_KAFKA_MSG_ALL_MAX_POLL_RECORDS:8192}"
      tbmq.msg.app.test_client:
        - key: max.poll.records
          value: "${TB_KAFKA_APP_TEST_CLIENT_MAX_POLL_RECORDS:512}"

service:
  id: "${TB_SERVICE_ID:}"

# Actor system parameters
actors:
  system:
    throughput: "${ACTORS_SYSTEM_THROUGHPUT:5}"
    scheduler-pool-size: "${ACTORS_SYSTEM_SCHEDULER_POOL_SIZE:1}"
    max-actor-init-attempts: "${ACTORS_SYSTEM_MAX_ACTOR_INIT_ATTEMPTS:10}"
    processing-metrics:
      enabled: "${ACTORS_SYSTEM_PROCESSING_METRICS_ENABLED:false}"
    disconnect-wait-timeout-ms: "${ACTORS_SYSTEM_DISCONNECT_WAIT_TIMEOUT_MS:2000}"
  persisted-device:
    dispatcher-pool-size: "${ACTORS_SYSTEM_PERSISTED_DEVICE_DISPATCHER_POOL_SIZE:4}"
    wait-before-actor-stop-minutes: "${ACTORS_SYSTEM_PERSISTED_DEVICE_WAIT_BEFORE_ACTOR_STOP_MINUTES:5}"
  client:
    dispatcher-pool-size: "${ACTORS_SYSTEM_CLIENT_DISPATCHER_POOL_SIZE:4}"
    wait-before-generated-actor-stop-seconds: "${ACTORS_SYSTEM_CLIENT_WAIT_BEFORE_GENERATED_ACTOR_STOP_SECONDS:10}"
    wait-before-named-actor-stop-seconds: "${ACTORS_SYSTEM_CLIENT_WAIT_BEFORE_NAMED_ACTOR_STOP_SECONDS:60}"
  rule:
    # Specify thread pool size for mail sender executor service
    mail_thread_pool_size: "${ACTORS_RULE_MAIL_THREAD_POOL_SIZE:2}"
    # Specify thread pool size for password reset emails
    mail_password_reset_thread_pool_size: "${ACTORS_RULE_MAIL_PASSWORD_RESET_THREAD_POOL_SIZE:2}"

database:
  ts_max_intervals: "${DATABASE_TS_MAX_INTERVALS:700}" # Max number of DB queries generated by single API call to fetch telemetry records

sql:
  # Specify whether to sort entities before batch update. Should be enabled for cluster mode to avoid deadlocks
  batch_sort: "${SQL_BATCH_SORT:true}"
  # Specify partitioning size for timestamp key-value storage. Example: DAYS, MONTHS, YEARS, INDEFINITE.
  ts_key_value_partitioning: "${SQL_TS_KV_PARTITIONING:DAYS}"
  ts:
    batch_size: "${SQL_TS_BATCH_SIZE:10000}"
    batch_max_delay: "${SQL_TS_BATCH_MAX_DELAY_MS:100}"
    batch_threads: "${SQL_TS_BATCH_THREADS:3}" # batch thread count have to be a prime number like 3 or 5 to gain perfect hash distribution
  ttl:
    ts:
      enabled: "${SQL_TTL_TS_ENABLED:true}"
      execution_interval_ms: "${SQL_TTL_TS_EXECUTION_INTERVAL_MS:86400000}" # Number of milliseconds. The current value corresponds to 1 day
      ts_key_value_ttl: "${SQL_TTL_TS_KEY_VALUE_TTL:604800}" # Number of seconds. Corresponds to 7 days

# SQL DAO Configuration
spring:
  data:
    jpa:
      repositories:
        enabled: "true"
  jpa:
    open-in-view: "false"
    hibernate:
      ddl-auto: "none"
    database-platform: "${SPRING_JPA_DATABASE_PLATFORM:org.hibernate.dialect.PostgreSQLDialect}"
  datasource:
    driverClassName: "${SPRING_DRIVER_CLASS_NAME:org.postgresql.Driver}"
    url: "${SPRING_DATASOURCE_URL:jdbc:postgresql://localhost:5432/thingsboard_mqtt_broker}"
    username: "${SPRING_DATASOURCE_USERNAME:postgres}"
    password: "${SPRING_DATASOURCE_PASSWORD:postgres}"
    hikari:
      maximumPoolSize: "${SPRING_DATASOURCE_MAXIMUM_POOL_SIZE:16}"
      maxLifetime: "${SPRING_DATASOURCE_MAX_LIFETIME:600000}" # 10 minutes

spring.lifecycle.timeout-per-shutdown-phase: "1m"

spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation: "true"
spring.jpa.properties.hibernate.order_by.default_null_ordering: "last"

# Security parameters
security:
  mqtt:
    # BOTH or SINGLE - the former means the first attempt of client authentication will be by 'basic' provider
    # and then by 'ssl' provider if 'basic' is not successful;
    # the latter means only one attempt is done according to the listener communication chosen (see listener.tcp/listener.ssl)
    auth_strategy: "${SECURITY_MQTT_AUTH_STRATEGY:BOTH}"
    basic:
      # If enabled the server will try to authenticate client with clientId and/or username and/or password
      enabled: "${SECURITY_MQTT_BASIC_ENABLED:false}"
    ssl:
      # If enabled the server will try to authenticate client with client certificate chain
      enabled: "${SECURITY_MQTT_SSL_ENABLED:false}"
  # JWT Token parameters
  jwt:
    tokenExpirationTime: "${JWT_TOKEN_EXPIRATION_TIME:9000}" # Number of seconds (2.5 hours)
    refreshTokenExpTime: "${JWT_REFRESH_TOKEN_EXPIRATION_TIME:604800}" # Number of seconds (1 week)
    tokenIssuer: "${JWT_TOKEN_ISSUER:thingsboard.io}"
    tokenSigningKey: "${JWT_TOKEN_SIGNING_KEY:thingsboardDefaultSigningKey}"
  basic:
    enabled: "${SECURITY_BASIC_ENABLED:false}"
  # Enable/disable case-sensitive username login
  user_login_case_sensitive: "${SECURITY_USER_LOGIN_CASE_SENSITIVE:true}"

mqtt:
  connect:
    threads: "${MQTT_CONNECT_THREADS:4}"
  # enable/disable processing of found subscriptions in parallel for published messages.
  # Helpful when the "PUBLISH" message should be delivered to lots of subscribers.
  # It is recommended to count the impact of this parameter before setting it on production.
  msg-subscriptions-parallel-processing: "${MQTT_MSG_SUBSCRIPTIONS_PARALLEL_PROCESSING:false}"
  pre-connect-queue:
    max-size: "${MQTT_PRE_CONNECT_QUEUE_MAX_SIZE:10000}"
  max-in-flight-msgs: "${MQTT_MAX_IN_FLIGHT_MSGS:1000}"
  retransmission:
    enabled: "${MQTT_RETRANSMISSION_ENABLED:false}"
    # if set to 0 - uses the number of processors available to the JVM multiplied by 2.
    scheduler-pool-size: "${MQTT_RETRANSMISSION_SCHEDULER_POOL_SIZE:0}"
    initial-delay: "${MQTT_RETRANSMISSION_INITIAL_DELAY:10}" # initial delay for the msg retransmission in seconds
    # increment period for the subsequent retransmissions of the msg in seconds (retransmission interval is increased by period for each run)
    period: "${MQTT_RETRANSMISSION_PERIOD:5}"
  keep-alive:
    # Schedule monitoring for inactive MQTT clients
    monitoring-delay-ms: "${MQTT_KEEP_ALIVE_MONITORING_DELAY_MS:100}"
    max-keep-alive: "${MQTT_KEEP_ALIVE_MAX_KEEP_ALIVE_SEC:600}" # in seconds, defaults to 10 minutes, for mqtt 5 clients
  topic:
    max-segments-count: "${MQTT_TOPIC_MAX_SEGMENTS_COUNT:0}" # 0 means the limitation is disabled
  shared-subscriptions:
    processing-type: "${MQTT_SHARED_SUBSCRIPTIONS_PROCESSING_TYPE:ROUND_ROBIN}" # supported types: ROUND_ROBIN
  subscription-trie:
    # Wait for clients to pause subscribing to topics so that application can clear SubscriptionTrie.
    # If wait is unsuccessful the subscribing clients will be resumed, but the clear will fail.
    wait-for-clear-lock-ms: "${MQTT_SUB_TRIE_WAIT_FOR_CLEAR_LOCK_MS:100}"
    # Cron specification when to run clearing empty nodes. Defaults to 'every day at midnight'
    clear-nodes-cron: "${MQTT_SUB_TRIE_CLEAR_NODES_CRON:0 0 0 * * *}"
    clear-nodes-zone: "${MQTT_SUB_TRIE_CLEAR_NODES_ZONE:UTC}"
  retain-msg-trie:
    # Wait for clients to pause updating retained messages for topics so that application can clear RetainMsgTrie.
    # If wait is unsuccessful retain messages processing will be resumed, but the clear will fail.
    wait-for-clear-lock-ms: "${MQTT_RETAIN_MSG_TRIE_WAIT_FOR_CLEAR_LOCK_MS:100}"
    # Cron specification when to run clearing empty nodes. Defaults to 'every day at midnight'
    clear-nodes-cron: "${MQTT_RETAIN_MSG_TRIE_CLEAR_NODES_CRON:0 0 0 * * *}"
    clear-nodes-zone: "${MQTT_RETAIN_MSG_TRIE_CLEAR_NODES_ZONE:UTC}"
  client-session-expiry:
    # Cron specification when to run clearing old and not active client sessions. Defaults to 'every hour'
    cron: "${MQTT_CLIENT_SESSION_EXPIRY_CRON:0 0 * ? * *}"
    zone: "${MQTT_CLIENT_SESSION_EXPIRY_ZONE:UTC}"
    # Specify max expiry interval allowed of inactive sessions in seconds. The current value corresponds to one week
    max-expiry-interval: "${MQTT_CLIENT_SESSION_EXPIRY_MAX_EXPIRY_INTERVAL:604800}"
    # Administration TTL in seconds for clearing sessions that do not expire by session expiry interval
    # (e.g. MQTTv3 cleanSession=false or MQTTv5 cleanStart=false && sessionExpiryInterval == 0).
    # The current value corresponds to one week. 0 or negative value means this TTL is disabled
    ttl: "${MQTT_CLIENT_SESSION_EXPIRY_TTL:604800}"
  version-3-1:
    max-client-id-length: "${MQTT_3_1_MAX_CLIENT_ID_LENGTH:1024}"
  persistent-session:
    device:
      persisted-messages:
        limit: "${MQTT_PERSISTENT_SESSION_DEVICE_PERSISTED_MESSAGES_LIMIT:1000}"
        # Specify TTL of persisted DEVICE messages in seconds. The current value corresponds to one week
        ttl: "${MQTT_PERSISTENT_SESSION_DEVICE_PERSISTED_MESSAGES_TTL:604800}"
        # Cron specification when to run clearing persisted device messages. Defaults to 'every day at 2 o'clock'
        clean-up:
          cron: "${MQTT_PERSISTENT_SESSION_DEVICE_PERSISTED_MESSAGES_CLEAN_UP_CRON:0 0 2 * * *}"
          zone: "${MQTT_PERSISTENT_SESSION_DEVICE_PERSISTED_MESSAGES_CLEAN_UP_ZONE:UTC}"
          session-ctx-page-size: "${MQTT_PERSISTENT_SESSION_DEVICE_PERSISTED_MESSAGES_CLEAN_UP_SESSION_CTX_PAGE_SIZE:1000}"
        sql:
          update-packet-queue:
            # batch thread count have to be a prime number like 3 or 5 to gain perfect hash distribution
            batch-threads: "${MQTT_PERSISTENT_SESSION_DEVICE_PERSISTED_MESSAGES_SQL_UPDATE_PACKET_QUEUE_BATCH_THREADS:1}"
            batch-size: "${MQTT_PERSISTENT_SESSION_DEVICE_PERSISTED_MESSAGES_SQL_UPDATE_PACKET_QUEUE_BATCH_SIZE:100}"
            max-delay: "${MQTT_PERSISTENT_SESSION_DEVICE_PERSISTED_MESSAGES_SQL_UPDATE_PACKET_QUEUE_MAX_DELAY:50}"
          delete-packet-queue:
            # batch thread count have to be a prime number like 3 or 5 to gain perfect hash distribution
            batch-threads: "${MQTT_PERSISTENT_SESSION_DEVICE_PERSISTED_MESSAGES_SQL_DELETE_PACKET_QUEUE_BATCH_THREADS:1}"
            batch-size: "${MQTT_PERSISTENT_SESSION_DEVICE_PERSISTED_MESSAGES_SQL_DELETE_PACKET_QUEUE_BATCH_SIZE:100}"
            max-delay: "${MQTT_PERSISTENT_SESSION_DEVICE_PERSISTED_MESSAGES_SQL_DELETE_PACKET_QUEUE_MAX_DELAY:50}"
  rate-limits:
    enabled: "${MQTT_RATE_LIMITS_ENABLED:false}"
    client-config: "${MQTT_RATE_LIMITS_CLIENT_CONFIG:10:1,300:60}"
  handler:
    all_msg_callback_threads: "${MQTT_HANDLER_ALL_MSG_CALLBACK_THREADS:2}"
    device_msg_callback_threads: "${MQTT_HANDLER_DEVICE_MSG_CALLBACK_THREADS:2}"
    app_msg_callback_threads: "${MQTT_HANDLER_APP_MSG_CALLBACK_THREADS:2}"

db:
  connection-check-rate-ms: "${DB_CONNECTION_CHECK_RATE_MS:10000}"

cache:
  # caffeine only
  type: "${CACHE_TYPE:caffeine}"
  stats:
    enabled: "${CACHE_STATS_ENABLED:true}"
    intervalSec: "${CACHE_STATS_INTERVAL_SEC:60}"

caffeine:
  specs:
    packetIdAndSerialNumber:
      timeToLiveInMinutes: "${CACHE_SPECS_PACKET_ID_SERIAL_NUMBER_TTL:1440}"
      maxSize: "${CACHE_SPECS_PACKET_ID_SERIAL_NUMBER_MAX_SIZE:10000}" # maxSize: 0 means the cache is disabled
    mqttClientCredentials:
      timeToLiveInMinutes: "${CACHE_SPECS_MQTT_CLIENT_CREDENTIALS_TTL:1440}"
      maxSize: "${CACHE_SPECS_MQTT_CLIENT_CREDENTIALS_MAX_SIZE:0}" # maxSize: 0 means the cache is disabled
    basicCredentialsPassword:
      timeToLiveInMinutes: "${CACHE_SPECS_BASIC_CREDENTIALS_PASSWORD_TTL:1}" # it is recommended to set this TTL as a small value to not store them for a long time (e.g. 1-5 minutes)
      maxSize: "${CACHE_SPECS_BASIC_CREDENTIALS_PASSWORD_MAX_SIZE:0}" # maxSize: 0 means the cache is disabled

stats:
  enabled: "${STATS_ENABLED:true}"
  print-interval-ms: "${STATS_PRINT_INTERVAL_MS:60000}"
  application-processor:
    enabled: "${APPLICATION_PROCESSOR_STATS_ENABLED:true}"

historical-data-report:
  enabled: "${HISTORICAL_DATA_REPORT_ENABLED:false}"
  interval: "${HISTORICAL_DATA_REPORT_INTERVAL:1}" # time in minutes (1-60) to collect historical data statistics. Used in cron expression
  zone: "${HISTORICAL_DATA_REPORT_ZONE:UTC}"

management:
  endpoints:
    web:
      exposure:
        # Expose metrics endpoint (use value 'info' to disable prometheus metrics).
        include: '${METRICS_ENDPOINTS_EXPOSE:prometheus}'

# spring CORS configuration
spring.mvc.cors:
  mappings:
    # Intercept path
    "[/api/**]":
      #Comma-separated list of origins to allow. '*' allows all origins. When not set,CORS support is disabled.
      allowed-origins: "*"
      #Comma-separated list of methods to allow. '*' allows all methods.
      allowed-methods: "*"
      #Comma-separated list of headers to allow in a request. '*' allows all headers.
      allowed-headers: "*"
      #How long, in seconds, the response from a pre-flight request can be cached by clients.
      max-age: "1800"
      #Set whether credentials are supported. When not set, credentials are not supported.
      allow-credentials: "true"

# The default timeout for asynchronous requests in milliseconds
spring.mvc.async.request-timeout: "${SPRING_MVC_ASYNC_REQUEST_TIMEOUT:30000}"

# For endpoints matching in Swagger
spring.mvc.pathmatch.matching-strategy: "ANT_PATH_MATCHER"

swagger:
  api_path_regex: "${SWAGGER_API_PATH_REGEX:/api/.*}"
  security_path_regex: "${SWAGGER_SECURITY_PATH_REGEX:/api/.*}"
  non_security_path_regex: "${SWAGGER_NON_SECURITY_PATH_REGEX:/api/noauth.*}"
  title: "${SWAGGER_TITLE:ThingsBoard MQTT Broker REST API}"
  description: "${SWAGGER_DESCRIPTION:ThingsBoard MQTT Broker open-source REST API documentation}"
  contact:
    name: "${SWAGGER_CONTACT_NAME:Thingsboard team}"
    url: "${SWAGGER_CONTACT_URL:https://thingsboard.io}"
    email: "${SWAGGER_CONTACT_EMAIL:info@thingsboard.io}"
  license:
    title: "${SWAGGER_LICENSE_TITLE:Apache License Version 2.0}"
    url: "${SWAGGER_LICENSE_URL:https://github.com/thingsboard/thingsboard-mqtt-broker/blob/main/LICENSE}"
  version: "${SWAGGER_VERSION:}"

# Application info
app:
  # Application version
  version: "@project.version@"

analysis:
  log:
    analyzed-client-ids: "${ANALYSIS_LOG_CLIENT_IDS:}"
